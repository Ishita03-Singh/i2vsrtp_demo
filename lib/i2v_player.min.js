!(function (e, t) {
    "object" == typeof exports && "undefined" != typeof module
      ? (module.exports = t())
      : "function" == typeof define && define.amd
      ? define(t)
      : ((e = "undefined" != typeof globalThis ? globalThis : e || self).JMuxer =
          t());
  })(this, function () {
    "use strict";
    function s(e, t) {
      if (!(e instanceof t))
        throw new TypeError("Cannot call a class as a function");
    }
    function n(e, t) {
      for (var r = 0; r < t.length; r++) {
        var n = t[r];
        (n.enumerable = n.enumerable || !1),
          (n.configurable = !0),
          "value" in n && (n.writable = !0),
          Object.defineProperty(e, n.key, n);
      }
    }
    function o(e, t, r) {
      return t && n(e.prototype, t), r && n(e, r), e;
    }
    function r(e, t, r) {
      return (
        t in e
          ? Object.defineProperty(e, t, {
              value: r,
              enumerable: !0,
              configurable: !0,
              writable: !0,
            })
          : (e[t] = r),
        e
      );
    }
    function e(e, t) {
      if ("function" != typeof t && null !== t)
        throw new TypeError("Super expression must either be null or a function");
      (e.prototype = Object.create(t && t.prototype, {
        constructor: { value: e, writable: !0, configurable: !0 },
      })),
        t && a(e, t);
    }
    function i(e) {
      return (i = Object.setPrototypeOf
        ? Object.getPrototypeOf
        : function (e) {
            return e.__proto__ || Object.getPrototypeOf(e);
          })(e);
    }
    function a(e, t) {
      return (a =
        Object.setPrototypeOf ||
        function (e, t) {
          return (e.__proto__ = t), e;
        })(e, t);
    }
    function u(e) {
      if (void 0 === e)
        throw new ReferenceError(
          "this hasn't been initialised - super() hasn't been called"
        );
      return e;
    }
    function c(r) {
      var n = (function () {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;
        try {
          return (
            Date.prototype.toString.call(
              Reflect.construct(Date, [], function () {})
            ),
            !0
          );
        } catch (e) {
          return !1;
        }
      })();
      return function () {
        var e,
          t = i(r);
        return (
          (e = n
            ? ((e = i(this).constructor), Reflect.construct(t, arguments, e))
            : t.apply(this, arguments)),
          (t = this),
          !(e = e) || ("object" != typeof e && "function" != typeof e) ? u(t) : e
        );
      };
    }
    function l(e, t) {
      (null == t || t > e.length) && (t = e.length);
      for (var r = 0, n = new Array(t); r < t; r++) n[r] = e[r];
      return n;
    }
    function d(e, t) {
      var r;
      if ("undefined" == typeof Symbol || null == e[Symbol.iterator]) {
        if (
          Array.isArray(e) ||
          (r = (function (e, t) {
            if (e) {
              if ("string" == typeof e) return l(e, t);
              var r = Object.prototype.toString.call(e).slice(8, -1);
              return "Map" ===
                (r = "Object" === r && e.constructor ? e.constructor.name : r) ||
                "Set" === r
                ? Array.from(e)
                : "Arguments" === r ||
                  /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)
                ? l(e, t)
                : void 0;
            }
          })(e)) ||
          (t && e && "number" == typeof e.length)
        ) {
          r && (e = r);
          var n = 0,
            t = function () {};
          return {
            s: t,
            n: function () {
              return n >= e.length ? { done: !0 } : { done: !1, value: e[n++] };
            },
            e: function (e) {
              throw e;
            },
            f: t,
          };
        }
        throw new TypeError(
          "Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
        );
      }
      var i,
        s = !0,
        a = !1;
      return {
        s: function () {
          r = e[Symbol.iterator]();
        },
        n: function () {
          var e = r.next();
          return (s = e.done), e;
        },
        e: function (e) {
          (a = !0), (i = e);
        },
        f: function () {
          try {
            s || null == r.return || r.return();
          } finally {
            if (a) throw i;
          }
        },
      };
    }
    var h, f;
    function y(e) {
      if (h) {
        for (
          var t = arguments.length, r = new Array(1 < t ? t - 1 : 0), n = 1;
          n < t;
          n++
        )
          r[n - 1] = arguments[n];
        h.apply(void 0, [e].concat(r));
      }
    }
    function p(e) {
      if (f) {
        for (
          var t = arguments.length, r = new Array(1 < t ? t - 1 : 0), n = 1;
          n < t;
          n++
        )
          r[n - 1] = arguments[n];
        f.apply(void 0, [e].concat(r));
      }
    }
    var v,
      m = (function () {
        function t(e) {
          s(this, t),
            (this.payload = e),
            (this.nri = (96 & this.payload[0]) >> 5),
            (this.ntype = 31 & this.payload[0]),
            (this.isvcl = 1 == this.ntype || 5 == this.ntype),
            (this.stype = ""),
            (this.isfmb = !1);
        }
        return (
          o(t, null, [
            {
              key: "type",
              value: function (e) {
                return e.ntype in t.TYPES ? t.TYPES[e.ntype] : "UNKNOWN";
              },
            },
            {
              key: "NDR",
              get: function () {
                return 1;
              },
            },
            {
              key: "IDR",
              get: function () {
                return 5;
              },
            },
            {
              key: "SEI",
              get: function () {
                return 6;
              },
            },
            {
              key: "SPS",
              get: function () {
                return 7;
              },
            },
            {
              key: "PPS",
              get: function () {
                return 8;
              },
            },
            {
              key: "AUD",
              get: function () {
                return 9;
              },
            },
            {
              key: "TYPES",
              get: function () {
                var e = {};
                return (
                  r(e, t.IDR, "IDR"),
                  r(e, t.SEI, "SEI"),
                  r(e, t.SPS, "SPS"),
                  r(e, t.PPS, "PPS"),
                  r(e, t.NDR, "NDR"),
                  r(e, t.AUD, "AUD"),
                  e
                );
              },
            },
          ]),
          o(t, [
            {
              key: "toString",
              value: function () {
                return "".concat(t.type(this), ": NRI: ").concat(this.getNri());
              },
            },
            {
              key: "getNri",
              value: function () {
                return this.nri;
              },
            },
            {
              key: "type",
              value: function () {
                return this.ntype;
              },
            },
            {
              key: "isKeyframe",
              value: function () {
                return this.ntype === t.IDR || 7 === this.stype;
              },
            },
            {
              key: "getPayload",
              value: function () {
                return this.payload;
              },
            },
            {
              key: "getPayloadSize",
              value: function () {
                return this.payload.byteLength;
              },
            },
            {
              key: "getSize",
              value: function () {
                return 4 + this.getPayloadSize();
              },
            },
            {
              key: "getData",
              value: function () {
                var e = new Uint8Array(this.getSize());
                return (
                  new DataView(e.buffer).setUint32(0, this.getSize() - 4),
                  e.set(this.getPayload(), 4),
                  e
                );
              },
            },
          ]),
          t
        );
      })(),
      g = (function () {
        function t(e) {
          s(this, t),
            (this.data = e),
            (this.index = 0),
            (this.bitLength = 8 * e.byteLength);
        }
        return (
          o(t, [
            {
              key: "skipBits",
              value: function (e) {
                if (this.bitsAvailable < e) return !1;
                this.index += e;
              },
            },
            {
              key: "readBits",
              value: function (e) {
                var t =
                  !(1 < arguments.length && void 0 !== arguments[1]) ||
                  arguments[1];
                return this.getBits(e, this.index, t);
              },
            },
            {
              key: "getBits",
              value: function (e, t) {
                var r =
                  !(2 < arguments.length && void 0 !== arguments[2]) ||
                  arguments[2];
                if (this.bitsAvailable < e) return 0;
                var n = t % 8,
                  i = this.data[(t / 8) | 0] & (255 >>> n),
                  n = 8 - n;
                if (e <= n) return r && (this.index += e), i >> (n - e);
                r && (this.index += n);
                e -= n;
                return (i << e) | this.getBits(e, t + n, r);
              },
            },
            {
              key: "skipLZ",
              value: function () {
                for (var e = 0; e < this.bitLength - this.index; ++e)
                  if (0 !== this.getBits(1, this.index + e, !1))
                    return (this.index += e), e;
                return e;
              },
            },
            {
              key: "skipUEG",
              value: function () {
                this.skipBits(1 + this.skipLZ());
              },
            },
            {
              key: "skipEG",
              value: function () {
                this.skipBits(1 + this.skipLZ());
              },
            },
            {
              key: "readUEG",
              value: function () {
                var e = this.skipLZ();
                return this.readBits(e + 1) - 1;
              },
            },
            {
              key: "readEG",
              value: function () {
                var e = this.readUEG();
                return 1 & e ? (1 + e) >>> 1 : -1 * (e >>> 1);
              },
            },
            {
              key: "readBoolean",
              value: function () {
                return 1 === this.readBits(1);
              },
            },
            {
              key: "readUByte",
              value: function () {
                var e =
                  0 < arguments.length && void 0 !== arguments[0]
                    ? arguments[0]
                    : 1;
                return this.readBits(8 * e);
              },
            },
            {
              key: "readUShort",
              value: function () {
                return this.readBits(16);
              },
            },
            {
              key: "readUInt",
              value: function () {
                return this.readBits(32);
              },
            },
            {
              key: "bitsAvailable",
              get: function () {
                return this.bitLength - this.index;
              },
            },
          ]),
          t
        );
      })(),
      k = (function () {
        function p(e) {
          s(this, p), (this.remuxer = e), (this.track = e.mp4track);
        }
        return (
          o(p, null, [
            {
              key: "extractNALu",
              value: function (e) {
                for (var t, r, n = 0, i = e.byteLength, s = 0, a = []; n < i; )
                  switch (((t = e[n++]), s)) {
                    case 0:
                      0 === t && (s = 1);
                      break;
                    case 1:
                      s = 0 === t ? 2 : 0;
                      break;
                    case 2:
                    case 3:
                      s =
                        0 === t
                          ? 3
                          : (1 === t &&
                              n < i &&
                              (r && a.push(e.subarray(r, n - s - 1)), (r = n)),
                            0);
                  }
                return r && a.push(e.subarray(r, i)), a;
              },
            },
            {
              key: "skipScalingList",
              value: function (e, t) {
                for (var r = 8, n = 8, i = 0; i < t; i++)
                  r =
                    0 === (n = 0 !== n ? (r + e.readEG() + 256) % 256 : n)
                      ? r
                      : n;
              },
            },
            {
              key: "readSPS",
              value: function (e) {
                var t,
                  r,
                  n,
                  i = new g(e),
                  s = 0,
                  a = 0,
                  o = 0,
                  u = 0,
                  c = 1;
                if (
                  (i.readUByte(),
                  (r = i.readUByte()),
                  i.readBits(5),
                  i.skipBits(3),
                  i.readUByte(),
                  i.skipUEG(),
                  100 === r ||
                    110 === r ||
                    122 === r ||
                    244 === r ||
                    44 === r ||
                    83 === r ||
                    86 === r ||
                    118 === r ||
                    128 === r)
                ) {
                  var l = i.readUEG();
                  if (
                    (3 === l && i.skipBits(1),
                    i.skipUEG(),
                    i.skipUEG(),
                    i.skipBits(1),
                    i.readBoolean())
                  ) {
                    n = 3 !== l ? 8 : 12;
                    for (var d = 0; d < n; ++d)
                      i.readBoolean() && p.skipScalingList(i, d < 6 ? 16 : 64);
                  }
                }
                i.skipUEG();
                var h,
                  e = i.readUEG();
                if (0 === e) i.readUEG();
                else if (1 === e) {
                  i.skipBits(1), i.skipEG(), i.skipEG(), (t = i.readUEG());
                  for (var f = 0; f < t; ++f) i.skipEG();
                }
                if (
                  (i.skipUEG(),
                  i.skipBits(1),
                  (r = i.readUEG()),
                  (l = i.readUEG()),
                  0 === (e = i.readBits(1)) && i.skipBits(1),
                  i.skipBits(1),
                  i.readBoolean() &&
                    ((s = i.readUEG()),
                    (a = i.readUEG()),
                    (o = i.readUEG()),
                    (u = i.readUEG())),
                  i.readBoolean())
                ) {
                  if (i.readBoolean()) {
                    switch (i.readUByte()) {
                      case 1:
                        h = [1, 1];
                        break;
                      case 2:
                        h = [12, 11];
                        break;
                      case 3:
                        h = [10, 11];
                        break;
                      case 4:
                        h = [16, 11];
                        break;
                      case 5:
                        h = [40, 33];
                        break;
                      case 6:
                        h = [24, 11];
                        break;
                      case 7:
                        h = [20, 11];
                        break;
                      case 8:
                        h = [32, 11];
                        break;
                      case 9:
                        h = [80, 33];
                        break;
                      case 10:
                        h = [18, 11];
                        break;
                      case 11:
                        h = [15, 11];
                        break;
                      case 12:
                        h = [64, 33];
                        break;
                      case 13:
                        h = [160, 99];
                        break;
                      case 14:
                        h = [4, 3];
                        break;
                      case 15:
                        h = [3, 2];
                        break;
                      case 16:
                        h = [2, 1];
                        break;
                      case 255:
                        h = [
                          (i.readUByte() << 8) | i.readUByte(),
                          (i.readUByte() << 8) | i.readUByte(),
                        ];
                    }
                    h && (c = h[0] / h[1]);
                  }
                  i.readBoolean() && i.skipBits(1),
                    i.readBoolean() &&
                      (i.skipBits(4), i.readBoolean() && i.skipBits(24)),
                    i.readBoolean() && (i.skipUEG(), i.skipUEG()),
                    i.readBoolean() &&
                      (i.readUInt(), i.readUInt(), i.readBoolean());
                }
                return {
                  width: Math.ceil((16 * (r + 1) - 2 * s - 2 * a) * c),
                  height: (2 - e) * (l + 1) * 16 - (e ? 2 : 4) * (o + u),
                };
              },
            },
            {
              key: "parseHeader",
              value: function (e) {
                var t = new g(e.getPayload());
                t.readUByte(),
                  (e.isfmb = 0 === t.readUEG()),
                  (e.stype = t.readUEG());
              },
            },
          ]),
          o(p, [
            {
              key: "parseSPS",
              value: function (e) {
                var t = p.readSPS(new Uint8Array(e));
                (this.track.width = t.width),
                  (this.track.height = t.height),
                  (this.track.sps = [new Uint8Array(e)]),
                  (this.track.codec = "avc1.");
                for (
                  var r = new DataView(e.buffer, e.byteOffset + 1, 4), n = 0;
                  n < 3;
                  ++n
                ) {
                  var i = r.getUint8(n).toString(16);
                  i.length < 2 && (i = "0" + i), (this.track.codec += i);
                }
              },
            },
            {
              key: "parsePPS",
              value: function (e) {
                this.track.pps = [new Uint8Array(e)];
              },
            },
            {
              key: "parseNAL",
              value: function (e) {
                if (!e) return !1;
                var t = !1;
                switch (e.type()) {
                  case m.IDR:
                  case m.NDR:
                    t = !0;
                    break;
                  case m.PPS:
                    this.track.pps ||
                      (this.parsePPS(e.getPayload()),
                      !this.remuxer.readyToDecode &&
                        this.track.pps &&
                        this.track.sps &&
                        (this.remuxer.readyToDecode = !0)),
                      (t = !0);
                    break;
                  case m.SPS:
                    this.track.sps ||
                      (this.parseSPS(e.getPayload()),
                      !this.remuxer.readyToDecode &&
                        this.track.pps &&
                        this.track.sps &&
                        (this.remuxer.readyToDecode = !0)),
                      (t = !0);
                    break;
                  case m.AUD:
                    y("AUD - ignoing");
                    break;
                  case m.SEI:
                    y("SEI - ignoing");
                }
                return t;
              },
            },
          ]),
          p
        );
      })(),
      b = (function () {
        function a(e) {
          s(this, a), (this.remuxer = e), (this.track = e.mp4track);
        }
        return (
          o(a, null, [
            {
              key: "getHeaderLength",
              value: function (e) {
                return 1 & e[1] ? 7 : 9;
              },
            },
            {
              key: "getFrameLength",
              value: function (e) {
                return ((3 & e[3]) << 11) | (e[4] << 3) | ((224 & e[5]) >>> 5);
              },
            },
            {
              key: "isAACPattern",
              value: function (e) {
                return 255 === e[0] && 240 == (240 & e[1]) && 0 == (6 & e[1]);
              },
            },
            {
              key: "extractAAC",
              value: function (e) {
                var t,
                  r,
                  n = 0,
                  i = e.byteLength,
                  s = [];
                if (!a.isAACPattern(e)) return p("Invalid ADTS audio format"), s;
                for (t = a.getHeaderLength(e), v = v || e.subarray(0, t); n < i; )
                  (r = a.getFrameLength(e)),
                    s.push(e.subarray(t, r)),
                    (e = e.slice(r)),
                    (n += r);
                return s;
              },
            },
            {
              key: "samplingRateMap",
              get: function () {
                return [
                  96e3, 88200, 64e3, 48e3, 44100, 32e3, 24e3, 22050, 16e3, 12e3,
                  11025, 8e3, 7350,
                ];
              },
            },
            {
              key: "getAACHeaderData",
              get: function () {
                return v;
              },
            },
          ]),
          o(a, [
            {
              key: "setAACConfig",
              value: function () {
                var e,
                  t,
                  r,
                  n = new Uint8Array(2),
                  i = a.getAACHeaderData;
                i &&
                  ((e = 1 + ((192 & i[2]) >>> 6)),
                  (t = (60 & i[2]) >>> 2),
                  (r = (1 & i[2]) << 2),
                  (r |= (192 & i[3]) >>> 6),
                  (n[0] = e << 3),
                  (n[0] |= (14 & t) >> 1),
                  (n[1] |= (1 & t) << 7),
                  (n[1] |= r << 3),
                  (this.track.codec = "mp4a.40." + e),
                  (this.track.channelCount = r),
                  (this.track.config = n),
                  (this.remuxer.readyToDecode = !0));
              },
            },
          ]),
          a
        );
      })(),
      t = (function () {
        function t(e) {
          s(this, t), (this.listener = {}), (this.type = "" | e);
        }
        return (
          o(t, [
            {
              key: "on",
              value: function (e, t) {
                return (
                  this.listener[e] || (this.listener[e] = []),
                  this.listener[e].push(t),
                  !0
                );
              },
            },
            {
              key: "off",
              value: function (e, t) {
                if (this.listener[e]) {
                  t = this.listener[e].indexOf(t);
                  return -1 < t && this.listener[e].splice(t, 1), !0;
                }
                return !1;
              },
            },
            {
              key: "offAll",
              value: function () {
                this.listener = {};
              },
            },
            {
              key: "dispatch",
              value: function (e, t) {
                return (
                  !!this.listener[e] &&
                  (this.listener[e].map(function (e) {
                    e.apply(null, [t]);
                  }),
                  !0)
                );
              },
            },
          ]),
          t
        );
      })(),
      S = (function () {
        function l() {
          s(this, l);
        }
        return (
          o(l, null, [
            {
              key: "init",
              value: function () {
                for (var e in (l.types = {
                  avc1: [],
                  avcC: [],
                  btrt: [],
                  dinf: [],
                  dref: [],
                  esds: [],
                  ftyp: [],
                  hdlr: [],
                  mdat: [],
                  mdhd: [],
                  mdia: [],
                  mfhd: [],
                  minf: [],
                  moof: [],
                  moov: [],
                  mp4a: [],
                  mvex: [],
                  mvhd: [],
                  sdtp: [],
                  stbl: [],
                  stco: [],
                  stsc: [],
                  stsd: [],
                  stsz: [],
                  stts: [],
                  tfdt: [],
                  tfhd: [],
                  traf: [],
                  trak: [],
                  trun: [],
                  trex: [],
                  tkhd: [],
                  vmhd: [],
                  smhd: [],
                }))
                  l.types.hasOwnProperty(e) &&
                    (l.types[e] = [
                      e.charCodeAt(0),
                      e.charCodeAt(1),
                      e.charCodeAt(2),
                      e.charCodeAt(3),
                    ]);
                var t = new Uint8Array([
                    0, 0, 0, 0, 0, 0, 0, 0, 118, 105, 100, 101, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 86, 105, 100, 101, 111, 72, 97, 110, 100,
                    108, 101, 114, 0,
                  ]),
                  r = new Uint8Array([
                    0, 0, 0, 0, 0, 0, 0, 0, 115, 111, 117, 110, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 83, 111, 117, 110, 100, 72, 97, 110, 100,
                    108, 101, 114, 0,
                  ]);
                l.HDLR_TYPES = { video: t, audio: r };
                var n = new Uint8Array([
                    0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 12, 117, 114, 108, 32, 0, 0,
                    0, 1,
                  ]),
                  i = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0]);
                (l.STTS = l.STSC = l.STCO = i),
                  (l.STSZ = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])),
                  (l.VMHD = new Uint8Array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0])),
                  (l.SMHD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0])),
                  (l.STSD = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 1]));
                (t = new Uint8Array([105, 115, 111, 109])),
                  (r = new Uint8Array([97, 118, 99, 49])),
                  (i = new Uint8Array([0, 0, 0, 1]));
                (l.FTYP = l.box(l.types.ftyp, t, i, t, r)),
                  (l.DINF = l.box(l.types.dinf, l.box(l.types.dref, n)));
              },
            },
            {
              key: "box",
              value: function (e) {
                for (
                  var t = arguments.length,
                    r = new Array(1 < t ? t - 1 : 0),
                    n = 1;
                  n < t;
                  n++
                )
                  r[n - 1] = arguments[n];
                for (var i, s = 8, a = r.length, o = a; a--; )
                  s += r[a].byteLength;
                for (
                  (i = new Uint8Array(s))[0] = (s >> 24) & 255,
                    i[1] = (s >> 16) & 255,
                    i[2] = (s >> 8) & 255,
                    i[3] = 255 & s,
                    i.set(e, 4),
                    a = 0,
                    s = 8;
                  a < o;
                  ++a
                )
                  i.set(r[a], s), (s += r[a].byteLength);
                return i;
              },
            },
            {
              key: "hdlr",
              value: function (e) {
                return l.box(l.types.hdlr, l.HDLR_TYPES[e]);
              },
            },
            {
              key: "mdat",
              value: function (e) {
                return l.box(l.types.mdat, e);
              },
            },
            {
              key: "mdhd",
              value: function (e, t) {
                return l.box(
                  l.types.mdhd,
                  new Uint8Array([
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    0,
                    3,
                    (e >> 24) & 255,
                    (e >> 16) & 255,
                    (e >> 8) & 255,
                    255 & e,
                    t >> 24,
                    (t >> 16) & 255,
                    (t >> 8) & 255,
                    255 & t,
                    85,
                    196,
                    0,
                    0,
                  ])
                );
              },
            },
            {
              key: "mdia",
              value: function (e) {
                return l.box(
                  l.types.mdia,
                  l.mdhd(e.timescale, e.duration),
                  l.hdlr(e.type),
                  l.minf(e)
                );
              },
            },
            {
              key: "mfhd",
              value: function (e) {
                return l.box(
                  l.types.mfhd,
                  new Uint8Array([
                    0,
                    0,
                    0,
                    0,
                    e >> 24,
                    (e >> 16) & 255,
                    (e >> 8) & 255,
                    255 & e,
                  ])
                );
              },
            },
            {
              key: "minf",
              value: function (e) {
                return "audio" === e.type
                  ? l.box(
                      l.types.minf,
                      l.box(l.types.smhd, l.SMHD),
                      l.DINF,
                      l.stbl(e)
                    )
                  : l.box(
                      l.types.minf,
                      l.box(l.types.vmhd, l.VMHD),
                      l.DINF,
                      l.stbl(e)
                    );
              },
            },
            {
              key: "moof",
              value: function (e, t, r) {
                return l.box(l.types.moof, l.mfhd(e), l.traf(r, t));
              },
            },
            {
              key: "moov",
              value: function (e, t, r) {
                for (var n = e.length, i = []; n--; ) i[n] = l.trak(e[n]);
                return l.box.apply(
                  null,
                  [l.types.moov, l.mvhd(r, t)].concat(i).concat(l.mvex(e))
                );
              },
            },
            {
              key: "mvex",
              value: function (e) {
                for (var t = e.length, r = []; t--; ) r[t] = l.trex(e[t]);
                return l.box.apply(null, [l.types.mvex].concat(r));
              },
            },
            {
              key: "mvhd",
              value: function (e, t) {
                t = new Uint8Array([
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  2,
                  (e >> 24) & 255,
                  (e >> 16) & 255,
                  (e >> 8) & 255,
                  255 & e,
                  (t >> 24) & 255,
                  (t >> 16) & 255,
                  (t >> 8) & 255,
                  255 & t,
                  0,
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  64,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  255,
                  255,
                  255,
                  255,
                ]);
                return l.box(l.types.mvhd, t);
              },
            },
            {
              key: "sdtp",
              value: function (e) {
                for (
                  var t,
                    r = e.samples || [],
                    n = new Uint8Array(4 + r.length),
                    i = 0;
                  i < r.length;
                  i++
                )
                  (t = r[i].flags),
                    (n[i + 4] =
                      (t.dependsOn << 4) |
                      (t.isDependedOn << 2) |
                      t.hasRedundancy);
                return l.box(l.types.sdtp, n);
              },
            },
            {
              key: "stbl",
              value: function (e) {
                return l.box(
                  l.types.stbl,
                  l.stsd(e),
                  l.box(l.types.stts, l.STTS),
                  l.box(l.types.stsc, l.STSC),
                  l.box(l.types.stsz, l.STSZ),
                  l.box(l.types.stco, l.STCO)
                );
              },
            },
            {
              key: "avc1",
              value: function (e) {
                for (var t, r, n = [], i = [], s = 0; s < e.sps.length; s++)
                  (r = (t = e.sps[s]).byteLength),
                    n.push((r >>> 8) & 255),
                    n.push(255 & r),
                    (n = n.concat(Array.prototype.slice.call(t)));
                for (s = 0; s < e.pps.length; s++)
                  (r = (t = e.pps[s]).byteLength),
                    i.push((r >>> 8) & 255),
                    i.push(255 & r),
                    (i = i.concat(Array.prototype.slice.call(t)));
                var a = l.box(
                    l.types.avcC,
                    new Uint8Array(
                      [1, n[3], n[4], n[5], 255, 224 | e.sps.length]
                        .concat(n)
                        .concat([e.pps.length])
                        .concat(i)
                    )
                  ),
                  o = e.width,
                  u = e.height;
                return l.box(
                  l.types.avc1,
                  new Uint8Array([
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    (o >> 8) & 255,
                    255 & o,
                    (u >> 8) & 255,
                    255 & u,
                    0,
                    72,
                    0,
                    0,
                    0,
                    72,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    18,
                    98,
                    105,
                    110,
                    101,
                    108,
                    112,
                    114,
                    111,
                    46,
                    114,
                    117,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    24,
                    17,
                    17,
                  ]),
                  a,
                  l.box(
                    l.types.btrt,
                    new Uint8Array([
                      0, 28, 156, 128, 0, 45, 198, 192, 0, 45, 198, 192,
                    ])
                  )
                );
              },
            },
            {
              key: "esds",
              value: function (e) {
                var t = e.config.byteLength,
                  r = new Uint8Array(26 + t + 3);
                return (
                  r.set([
                    0,
                    0,
                    0,
                    0,
                    3,
                    23 + t,
                    0,
                    1,
                    0,
                    4,
                    15 + t,
                    64,
                    21,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    5,
                    t,
                  ]),
                  r.set(e.config, 26),
                  r.set([6, 1, 2], 26 + t),
                  r
                );
              },
            },
            {
              key: "mp4a",
              value: function (e) {
                var t = e.audiosamplerate;
                return l.box(
                  l.types.mp4a,
                  new Uint8Array([
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    e.channelCount,
                    0,
                    16,
                    0,
                    0,
                    0,
                    0,
                    (t >> 8) & 255,
                    255 & t,
                    0,
                    0,
                  ]),
                  l.box(l.types.esds, l.esds(e))
                );
              },
            },
            {
              key: "stsd",
              value: function (e) {
                return "audio" === e.type
                  ? l.box(l.types.stsd, l.STSD, l.mp4a(e))
                  : l.box(l.types.stsd, l.STSD, l.avc1(e));
              },
            },
            {
              key: "tkhd",
              value: function (e) {
                var t = e.id,
                  r = e.duration,
                  n = e.width,
                  i = e.height,
                  e = e.volume;
                return l.box(
                  l.types.tkhd,
                  new Uint8Array([
                    0,
                    0,
                    0,
                    7,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    (t >> 24) & 255,
                    (t >> 16) & 255,
                    (t >> 8) & 255,
                    255 & t,
                    0,
                    0,
                    0,
                    0,
                    r >> 24,
                    (r >> 16) & 255,
                    (r >> 8) & 255,
                    255 & r,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    (e >> 0) & 255,
                    (((e % 1) * 10) >> 0) & 255,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    64,
                    0,
                    0,
                    0,
                    (n >> 8) & 255,
                    255 & n,
                    0,
                    0,
                    (i >> 8) & 255,
                    255 & i,
                    0,
                    0,
                  ])
                );
              },
            },
            {
              key: "traf",
              value: function (e, t) {
                var r = l.sdtp(e),
                  n = e.id;
                return l.box(
                  l.types.traf,
                  l.box(
                    l.types.tfhd,
                    new Uint8Array([
                      0,
                      0,
                      0,
                      0,
                      n >> 24,
                      (n >> 16) & 255,
                      (n >> 8) & 255,
                      255 & n,
                    ])
                  ),
                  l.box(
                    l.types.tfdt,
                    new Uint8Array([
                      0,
                      0,
                      0,
                      0,
                      t >> 24,
                      (t >> 16) & 255,
                      (t >> 8) & 255,
                      255 & t,
                    ])
                  ),
                  l.trun(e, r.length + 16 + 16 + 8 + 16 + 8 + 8),
                  r
                );
              },
            },
            {
              key: "trak",
              value: function (e) {
                return (
                  (e.duration = e.duration || 4294967295),
                  l.box(l.types.trak, l.tkhd(e), l.mdia(e))
                );
              },
            },
            {
              key: "trex",
              value: function (e) {
                e = e.id;
                return l.box(
                  l.types.trex,
                  new Uint8Array([
                    0,
                    0,
                    0,
                    0,
                    e >> 24,
                    (e >> 16) & 255,
                    (e >> 8) & 255,
                    255 & e,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    1,
                  ])
                );
              },
            },
            {
              key: "trun",
              value: function (e, t) {
                var r,
                  n,
                  i,
                  s,
                  a,
                  o = e.samples || [],
                  u = o.length,
                  e = 12 + 16 * u,
                  c = new Uint8Array(e);
                for (
                  t += 8 + e,
                    c.set(
                      [
                        0,
                        0,
                        15,
                        1,
                        (u >>> 24) & 255,
                        (u >>> 16) & 255,
                        (u >>> 8) & 255,
                        255 & u,
                        (t >>> 24) & 255,
                        (t >>> 16) & 255,
                        (t >>> 8) & 255,
                        255 & t,
                      ],
                      0
                    ),
                    r = 0;
                  r < u;
                  r++
                )
                  (n = (a = o[r]).duration),
                    (i = a.size),
                    (s = a.flags),
                    (a = a.cts),
                    c.set(
                      [
                        (n >>> 24) & 255,
                        (n >>> 16) & 255,
                        (n >>> 8) & 255,
                        255 & n,
                        (i >>> 24) & 255,
                        (i >>> 16) & 255,
                        (i >>> 8) & 255,
                        255 & i,
                        (s.isLeading << 2) | s.dependsOn,
                        (s.isDependedOn << 6) |
                          (s.hasRedundancy << 4) |
                          (s.paddingValue << 1) |
                          s.isNonSync,
                        61440 & s.degradPrio,
                        15 & s.degradPrio,
                        (a >>> 24) & 255,
                        (a >>> 16) & 255,
                        (a >>> 8) & 255,
                        255 & a,
                      ],
                      12 + 16 * r
                    );
                return l.box(l.types.trun, c);
              },
            },
            {
              key: "initSegment",
              value: function (e, t, r) {
                l.types || l.init();
                (t = l.moov(e, t, r)),
                  (r = new Uint8Array(l.FTYP.byteLength + t.byteLength));
                return r.set(l.FTYP), r.set(t, l.FTYP.byteLength), r;
              },
            },
          ]),
          l
        );
      })(),
      w = 1,
      C = (function () {
        function e() {
          s(this, e), (this.seq = 1);
        }
        return (
          o(e, null, [
            {
              key: "getTrackID",
              value: function () {
                return w++;
              },
            },
          ]),
          o(e, [
            {
              key: "flush",
              value: function () {
                this.seq++, (this.mp4track.len = 0), (this.mp4track.samples = []);
              },
            },
            {
              key: "isReady",
              value: function () {
                return !(!this.readyToDecode || !this.samples.length) || null;
              },
            },
          ]),
          e
        );
      })(),
      x = (function () {
        e(r, C);
        var t = c(r);
        function r() {
          var e;
          return (
            s(this, r),
            ((e = t.call(this)).readyToDecode = !1),
            (e.nextDts = 0),
            (e.dts = 0),
            (e.timescale = 1e3),
            (e.mp4track = {
              id: C.getTrackID(),
              type: "audio",
              channelCount: 0,
              len: 0,
              fragmented: !0,
              timescale: e.timescale,
              duration: e.timescale,
              samples: [],
              config: "",
              codec: "",
            }),
            (e.samples = []),
            (e.aac = new b(u(e))),
            e
          );
        }
        return (
          o(r, [
            {
              key: "resetTrack",
              value: function () {
                (this.readyToDecode = !1),
                  (this.mp4track.codec = ""),
                  (this.mp4track.channelCount = ""),
                  (this.mp4track.config = ""),
                  (this.mp4track.timescale = this.timescale);
              },
            },
            {
              key: "remux",
              value: function (e) {
                if (0 < e.length)
                  for (var t = 0; t < e.length; t++) {
                    var r = e[t],
                      n = r.units,
                      i = n.byteLength;
                    this.samples.push({
                      units: n,
                      size: i,
                      duration: r.duration,
                    }),
                      (this.mp4track.len += i),
                      this.readyToDecode || this.aac.setAACConfig();
                  }
              },
            },
            {
              key: "getPayload",
              value: function () {
                if (!this.isReady()) return null;
                var e = new Uint8Array(this.mp4track.len),
                  t = 0,
                  r = this.mp4track.samples;
                for (this.dts = this.nextDts; this.samples.length; ) {
                  var n,
                    i = this.samples.shift();
                  i.units;
                  (n = i.duration) <= 0
                    ? (y(
                        "remuxer: invalid sample duration at DTS: "
                          .concat(this.nextDts, " :")
                          .concat(n)
                      ),
                      (this.mp4track.len -= i.size))
                    : ((this.nextDts += n),
                      (n = {
                        size: i.size,
                        duration: n,
                        cts: 0,
                        flags: {
                          isLeading: 0,
                          isDependedOn: 0,
                          hasRedundancy: 0,
                          degradPrio: 0,
                          dependsOn: 1,
                        },
                      }),
                      e.set(i.units, t),
                      (t += i.size),
                      r.push(n));
                }
                return r.length
                  ? new Uint8Array(e.buffer, 0, this.mp4track.len)
                  : null;
              },
            },
          ]),
          r
        );
      })(),
      E = (function () {
        e(r, C);
        var t = c(r);
        function r() {
          var e;
          return (
            s(this, r),
            ((e = t.call(this)).readyToDecode = !1),
            (e.nextDts = 0),
            (e.dts = 0),
            (e.timescale = 1e3),
            (e.mp4track = {
              id: C.getTrackID(),
              type: "video",
              len: 0,
              fragmented: !0,
              sps: "",
              pps: "",
              width: 0,
              height: 0,
              timescale: e.timescale,
              duration: e.timescale,
              samples: [],
            }),
            (e.samples = []),
            (e.h264 = new k(u(e))),
            e
          );
        }
        return (
          o(r, [
            {
              key: "resetTrack",
              value: function () {
                (this.readyToDecode = !1),
                  (this.mp4track.sps = ""),
                  (this.mp4track.pps = "");
              },
            },
            {
              key: "remux",
              value: function (e) {
                var t = d(e);
                try {
                  for (t.s(); !(r = t.n()).done; ) {
                    var r = r.value,
                      n = [],
                      i = 0,
                      s = d(r.units);
                    try {
                      for (s.s(); !(a = s.n()).done; ) {
                        var a = a.value;
                        this.h264.parseNAL(a) && (n.push(a), (i += a.getSize()));
                      }
                    } catch (e) {
                      s.e(e);
                    } finally {
                      s.f();
                    }
                    0 < n.length &&
                      this.readyToDecode &&
                      ((this.mp4track.len += i),
                      this.samples.push({
                        units: n,
                        size: i,
                        keyFrame: r.keyFrame,
                        duration: r.duration,
                      }));
                  }
                } catch (e) {
                  t.e(e);
                } finally {
                  t.f();
                }
              },
            },
            {
              key: "getPayload",
              value: function () {
                if (!this.isReady()) return null;
                var e = new Uint8Array(this.mp4track.len),
                  t = 0,
                  r = this.mp4track.samples;
                for (this.dts = this.nextDts; this.samples.length; ) {
                  var n,
                    i = this.samples.shift(),
                    s = i.units;
                  if ((n = i.duration) <= 0)
                    y(
                      "remuxer: invalid sample duration at DTS: "
                        .concat(this.nextDts, " :")
                        .concat(n)
                    ),
                      (this.mp4track.len -= i.size);
                  else {
                    (this.nextDts += n),
                      (i = {
                        size: i.size,
                        duration: n,
                        cts: 0,
                        flags: {
                          isLeading: 0,
                          isDependedOn: 0,
                          hasRedundancy: 0,
                          degradPrio: 0,
                          isNonSync: i.keyFrame ? 0 : 1,
                          dependsOn: i.keyFrame ? 2 : 1,
                        },
                      });
                    var a = d(s);
                    try {
                      for (a.s(); !(o = a.n()).done; ) {
                        var o = o.value;
                        e.set(o.getData(), t), (t += o.getSize());
                      }
                    } catch (e) {
                      a.e(e);
                    } finally {
                      a.f();
                    }
                    r.push(i);
                  }
                }
                return r.length
                  ? new Uint8Array(e.buffer, 0, this.mp4track.len)
                  : null;
              },
            },
          ]),
          r
        );
      })();
    function U(e, t) {
      var r = new Uint8Array((0 | e.byteLength) + (0 | t.byteLength));
      return r.set(e, 0), r.set(t, 0 | e.byteLength), r;
    }
    var B = (function () {
        e(n, t);
        var r = c(n);
        function n(e) {
          var t;
          return (
            s(this, n),
            ((t = r.call(this, "remuxer")).initialized = !1),
            (t.trackTypes = []),
            (t.tracks = {}),
            (t.mediaDuration = e ? 1 / 0 : 1e3),
            t
          );
        }
        return (
          o(n, [
            {
              key: "addTrack",
              value: function (e) {
                ("video" !== e && "both" !== e) ||
                  ((this.tracks.video = new E()), this.trackTypes.push("video")),
                  ("audio" !== e && "both" !== e) ||
                    ((this.tracks.audio = new x()),
                    this.trackTypes.push("audio"));
              },
            },
            {
              key: "reset",
              value: function () {
                var t = d(this.trackTypes);
                try {
                  for (t.s(); !(e = t.n()).done; ) {
                    var e = e.value;
                    this.tracks[e].resetTrack();
                  }
                } catch (e) {
                  t.e(e);
                } finally {
                  t.f();
                }
                this.initialized = !1;
              },
            },
            {
              key: "destroy",
              value: function () {
                (this.tracks = {}), this.offAll();
              },
            },
            {
              key: "flush",
              value: function () {
                if (this.initialized) {
                  var t = d(this.trackTypes);
                  try {
                    for (t.s(); !(u = t.n()).done; ) {
                      var e = u.value,
                        r = this.tracks[e],
                        n = r.getPayload();
                      n &&
                        n.byteLength &&
                        ((c = {
                          type: e,
                          payload: U(S.moof(r.seq, r.dts, r.mp4track), S.mdat(n)),
                          dts: r.dts,
                        }),
                        this.dispatch("buffer", c),
                        (o = r.dts / 1e3),
                        (c = n = u = void 0),
                        (u = ""),
                        (n = Math.floor(o)),
                        (c = parseInt(n / 3600, 10) % 24),
                        (o = parseInt(n / 60, 10) % 60),
                        0 < c && (u += (c < 10 ? "0" + c : c) + ":"),
                        (u = u +=
                          (o < 10 ? "0" + o : o) +
                          ":" +
                          ((n = n < 0 ? 0 : n % 60) < 10 ? "0" + n : n)),
                        y(
                          "put segment ("
                            .concat(e, "): ")
                            .concat(r.seq, " dts: ")
                            .concat(r.dts, " gop: ")
                            .concat(r.mp4track.samples.length, " second: ")
                            .concat(u)
                        ),
                        r.flush());
                    }
                  } catch (e) {
                    t.e(e);
                  } finally {
                    t.f();
                  }
                } else if (this.isReady()) {
                  this.dispatch("ready");
                  var i = d(this.trackTypes);
                  try {
                    for (i.s(); !(a = i.n()).done; ) {
                      var s = a.value,
                        a = this.tracks[s],
                        a = {
                          type: s,
                          payload: S.initSegment(
                            [a.mp4track],
                            this.mediaDuration,
                            a.mp4track.timescale
                          ),
                        };
                      this.dispatch("buffer", a);
                    }
                  } catch (e) {
                    i.e(e);
                  } finally {
                    i.f();
                  }
                  y("Initial segment generated."),
                    (this.initialized = !0),
                    this.flush();
                }
                var o, u, c;
              },
            },
            {
              key: "isReady",
              value: function () {
                var t = d(this.trackTypes);
                try {
                  for (t.s(); !(e = t.n()).done; ) {
                    var e = e.value;
                    if (
                      !this.tracks[e].readyToDecode ||
                      !this.tracks[e].samples.length
                    )
                      return !1;
                  }
                } catch (e) {
                  t.e(e);
                } finally {
                  t.f();
                }
                return !0;
              },
            },
            {
              key: "remux",
              value: function (e) {
                var t = d(this.trackTypes);
                try {
                  for (t.s(); !(n = t.n()).done; ) {
                    var r = n.value,
                      n = e[r];
                    ("audio" === r &&
                      this.tracks.video &&
                      !this.tracks.video.readyToDecode) ||
                      (0 < n.length && this.tracks[r].remux(n));
                  }
                } catch (e) {
                  t.e(e);
                } finally {
                  t.f();
                }
                this.flush();
              },
            },
          ]),
          n
        );
      })(),
      P = (function () {
        e(i, t);
        var n = c(i);
        function i(e, t) {
          var r;
          return (
            s(this, i),
            ((r = n.call(this, "buffer")).type = t),
            (r.queue = new Uint8Array()),
            (r.cleaning = !1),
            (r.pendingCleaning = 0),
            (r.cleanOffset = 30),
            (r.cleanRanges = []),
            (r.sourceBuffer = e),
            r.sourceBuffer.addEventListener("updateend", function () {
              0 < r.pendingCleaning &&
                (r.initCleanup(r.pendingCleaning), (r.pendingCleaning = 0)),
                (r.cleaning = !1),
                r.cleanRanges.length && r.doCleanup();
            }),
            r.sourceBuffer.addEventListener("error", function () {
              r.dispatch("error", {
                type: r.type,
                name: "buffer",
                error: "buffer error",
              });
            }),
            r
          );
        }
        return (
          o(i, [
            {
              key: "destroy",
              value: function () {
                (this.queue = null), (this.sourceBuffer = null), this.offAll();
              },
            },
            {
              key: "doCleanup",
              value: function () {
                var e;
                this.cleanRanges.length
                  ? ((e = this.cleanRanges.shift()),
                    y(
                      ""
                        .concat(this.type, " remove range [")
                        .concat(e[0], " - ")
                        .concat(e[1], ")")
                    ),
                    (this.cleaning = !0),
                    this.sourceBuffer.remove(e[0], e[1]))
                  : (this.cleaning = !1);
              },
            },
            {
              key: "initCleanup",
              value: function (e) {
                try {
                  if (this.sourceBuffer.updating)
                    return void (this.pendingCleaning = e);
                  if (
                    this.sourceBuffer &&
                    this.sourceBuffer.buffered &&
                    this.sourceBuffer.buffered.length &&
                    !this.cleaning
                  ) {
                    for (var t = 0; t < this.sourceBuffer.buffered.length; ++t) {
                      var r = this.sourceBuffer.buffered.start(t),
                        n = this.sourceBuffer.buffered.end(t);
                      e - r > this.cleanOffset &&
                        r < (n = e - this.cleanOffset) &&
                        this.cleanRanges.push([r, n]);
                    }
                    this.doCleanup();
                  }
                } catch (e) {}
              },
            },
            {
              key: "doAppend",
              value: function () {
                if (this.queue.length && !this.sourceBuffer.updating)
                  try {
                    this.sourceBuffer.appendBuffer(this.queue),
                      (this.queue = new Uint8Array());
                  } catch (e) {
                    if ("QuotaExceededError" === e.name)
                      return (
                        y("".concat(this.type, " buffer quota full")),
                        void this.dispatch("error", {
                          type: this.type,
                          name: "QuotaExceeded",
                          error: "buffer error",
                        })
                      );
                    p(
                      "Error occured while appending "
                        .concat(this.type, " buffer -  ")
                        .concat(e.name, ": ")
                        .concat(e.message)
                    ),
                      this.dispatch("error", {
                        type: this.type,
                        name: "unexpectedError",
                        error: "buffer error",
                      });
                  }
              },
            },
            {
              key: "feed",
              value: function (e) {
                this.queue = U(this.queue, e);
              },
            },
          ]),
          i
        );
      })();
    return (
      (window.MediaSource = window.MediaSource || window.WebKitMediaSource),
      (function () {
        e(n, t);
        var r = c(n);
        function n(e) {
          var t;
          s(this, n),
            (t = r.call(this, "jmuxer")),
            (window.MediaSource = window.MediaSource || window.WebKitMediaSource);
          if (
            ((t.options = Object.assign(
              {},
              {
                node: "",
                mode: "both",
                flushingTime: 1500,
                clearBuffer: !0,
                onReady: null,
                fps: 30,
                debug: !1,
              },
              e
            )),
            t.options.debug && ((h = console.log), (f = console.error)),
            "string" == typeof t.options.node &&
              "" == t.options.node &&
              p(
                "no video element were found to render, provide a valid video element"
              ),
            t.options.fps || (t.options.fps = 30),
            (t.frameDuration = (1e3 / t.options.fps) | 0),
            (t.node =
              "string" == typeof t.options.node
                ? document.getElementById(t.options.node)
                : t.options.node),
            (t.sourceBuffers = {}),
            (t.isMSESupported = !!window.MediaSource),
            !t.isMSESupported)
          )
            throw "Oops! Browser does not support media source extension.";
          return (
            t.setupMSE(),
            (t.remuxController = new B(t.options.clearBuffer)),
            t.remuxController.addTrack(t.options.mode),
            (t.mseReady = !1),
            (t.lastCleaningTime = Date.now()),
            (t.kfPosition = []),
            (t.kfCounter = 0),
            t.remuxController.on("buffer", t.onBuffer.bind(u(t))),
            t.remuxController.on("ready", t.createBuffer.bind(u(t))),
            t.startInterval(),
            t
          );
        }
        return (
          o(n, null, [
            {
              key: "isSupported",
              value: function (e) {
                return (
                  window.MediaSource && window.MediaSource.isTypeSupported(e)
                );
              },
            },
          ]),
          o(n, [
            {
              key: "setupMSE",
              value: function () {
                (this.mediaSource = new MediaSource()),
                  (this.node.src = URL.createObjectURL(this.mediaSource)),
                  this.mediaSource.addEventListener(
                    "sourceopen",
                    this.onMSEOpen.bind(this)
                  ),
                  this.mediaSource.addEventListener(
                    "sourceclose",
                    this.onMSEClose.bind(this)
                  ),
                  this.mediaSource.addEventListener(
                    "webkitsourceopen",
                    this.onMSEOpen.bind(this)
                  ),
                  this.mediaSource.addEventListener(
                    "webkitsourceclose",
                    this.onMSEClose.bind(this)
                  );
              },
            },
            {
              key: "feed",
              value: function (e) {
                var t,
                  r,
                  n = !1,
                  i = { video: [], audio: [] };
                e &&
                  this.remuxController &&
                  ((r = e.duration ? parseInt(e.duration) : 0),
                  e.video &&
                    0 < (t = k.extractNALu(e.video)).length &&
                    ((i.video = this.getVideoFrames(t, r)), (n = !0)),
                  e.audio &&
                    0 < (t = b.extractAAC(e.audio)).length &&
                    ((i.audio = this.getAudioFrames(t, r)), (n = !0)),
                  n
                    ? this.remuxController.remux(i)
                    : p(
                        "Input object must have video and/or audio property. Make sure it is a valid typed array"
                      ));
              },
            },
            {
              key: "getVideoFrames",
              value: function (e, t) {
                var r,
                  n = this,
                  i = [],
                  s = [],
                  a = 0,
                  o = !1,
                  u = !1,
                  c = d(e);
                try {
                  for (c.s(); !(l = c.n()).done; ) {
                    var l = l.value,
                      l = new m(l);
                    (l.type() !== m.IDR && l.type() !== m.NDR) ||
                      k.parseHeader(l),
                      i.length &&
                        u &&
                        (l.isfmb || !l.isvcl) &&
                        (s.push({ units: i, keyFrame: o }), (u = o = !(i = []))),
                      i.push(l),
                      (o = o || l.isKeyframe()),
                      (u = u || l.isvcl);
                  }
                } catch (e) {
                  c.e(e);
                } finally {
                  c.f();
                }
                return (
                  i.length &&
                    (u || !s.length
                      ? s.push({ units: i, keyFrame: o })
                      : (s[(e = s.length - 1)].units = s[e].units.concat(i))),
                  (r = t ? (t / s.length) | 0 : this.frameDuration),
                  (a = t ? t - r * s.length : 0),
                  s.map(function (e) {
                    (e.duration = r),
                      0 < a && (e.duration++, a--),
                      n.kfCounter++,
                      e.keyFrame &&
                        n.options.clearBuffer &&
                        n.kfPosition.push((n.kfCounter * r) / 1e3);
                  }),
                  y("jmuxer: No. of frames of the last chunk: ".concat(s.length)),
                  s
                );
              },
            },
            {
              key: "getAudioFrames",
              value: function (e, t) {
                var r,
                  n = [],
                  i = 0,
                  s = d(e);
                try {
                  for (s.s(); !(a = s.n()).done; ) {
                    var a = a.value;
                    n.push({ units: a });
                  }
                } catch (e) {
                  s.e(e);
                } finally {
                  s.f();
                }
                return (
                  (r = t ? (t / n.length) | 0 : this.frameDuration),
                  (i = t ? t - r * n.length : 0),
                  n.map(function (e) {
                    (e.duration = r), 0 < i && (e.duration++, i--);
                  }),
                  n
                );
              },
            },
            {
              key: "destroy",
              value: function () {
                if ((this.stopInterval(), this.mediaSource)) {
                  try {
                    this.bufferControllers && this.mediaSource.endOfStream();
                  } catch (e) {
                    p("mediasource is not available to end ".concat(e.message));
                  }
                  this.mediaSource = null;
                }
                if (
                  (this.remuxController &&
                    (this.remuxController.destroy(),
                    (this.remuxController = null)),
                  this.bufferControllers)
                ) {
                  for (var e in this.bufferControllers)
                    this.bufferControllers[e].destroy();
                  this.bufferControllers = null;
                }
                (this.node = !1), (this.mseReady = !1), (this.videoStarted = !1);
              },
            },
            {
              key: "createBuffer",
              value: function () {
                if (
                  this.mseReady &&
                  this.remuxController &&
                  this.remuxController.isReady() &&
                  !this.bufferControllers
                )
                  for (var e in ((this.bufferControllers = {}),
                  this.remuxController.tracks)) {
                    var t = this.remuxController.tracks[e];
                    if (
                      !n.isSupported(
                        ""
                          .concat(e, '/mp4; codecs="')
                          .concat(t.mp4track.codec, '"')
                      )
                    )
                      return p("Browser does not support codec"), !1;
                    t = this.mediaSource.addSourceBuffer(
                      "".concat(e, '/mp4; codecs="').concat(t.mp4track.codec, '"')
                    );
                    (this.bufferControllers[e] = new P(t, e)),
                      (this.sourceBuffers[e] = t),
                      this.bufferControllers[e].on(
                        "error",
                        this.onBufferError.bind(this)
                      );
                  }
              },
            },
            {
              key: "startInterval",
              value: function () {
                var e = this;
                this.interval = setInterval(function () {
                  e.bufferControllers && (e.releaseBuffer(), e.clearBuffer());
                }, this.options.flushingTime);
              },
            },
            {
              key: "stopInterval",
              value: function () {
                this.interval && clearInterval(this.interval);
              },
            },
            {
              key: "releaseBuffer",
              value: function () {
                for (var e in this.bufferControllers)
                  this.bufferControllers[e].doAppend();
              },
            },
            {
              key: "getSafeClearOffsetOfBuffer",
              value: function (e) {
                for (
                  var t, r = ("audio" === this.options.mode && e) || 0, n = 0;
                  n < this.kfPosition.length && !(this.kfPosition[n] >= e);
                  n++
                )
                  t = this.kfPosition[n];
                return (
                  t &&
                    (this.kfPosition = this.kfPosition.filter(function (e) {
                      return e < t && (r = e), t <= e;
                    })),
                  r
                );
              },
            },
            {
              key: "clearBuffer",
              value: function () {
                if (
                  this.options.clearBuffer &&
                  1e4 < Date.now() - this.lastCleaningTime
                ) {
                  for (var e in this.bufferControllers) {
                    var t = this.getSafeClearOffsetOfBuffer(
                      this.node.currentTime
                    );
                    this.bufferControllers[e].initCleanup(t);
                  }
                  this.lastCleaningTime = Date.now();
                }
              },
            },
            {
              key: "onBuffer",
              value: function (e) {
                this.bufferControllers &&
                  this.bufferControllers[e.type] &&
                  this.bufferControllers[e.type].feed(e.payload);
              },
            },
            {
              key: "onMSEOpen",
              value: function () {
                (this.mseReady = !0),
                  "function" == typeof this.options.onReady &&
                    (this.options.onReady(), (this.options.onReady = null)),
                  this.createBuffer();
              },
            },
            {
              key: "onMSEClose",
              value: function () {
                (this.mseReady = !1), (this.videoStarted = !1);
              },
            },
            {
              key: "onBufferError",
              value: function (e) {
                if ("QuotaExceeded" != e.name) {
                  if (
                    (0 < this.mediaSource.sourceBuffers.length &&
                      this.sourceBuffers[e.type] &&
                      this.mediaSource.removeSourceBuffer(
                        this.sourceBuffers[e.type]
                      ),
                    0 == this.mediaSource.sourceBuffers.length)
                  )
                    try {
                      this.mediaSource.endOfStream();
                    } catch (e) {
                      p("mediasource is not available to end");
                    }
                } else
                  this.bufferControllers[e.type].initCleanup(
                    this.node.currentTime
                  );
              },
            },
          ]),
          n
        );
      })()
    );
  });
  var I2vSdk = (function () {
      function e(e, t, r, n) {
        (this.playerIp = "localhost"),
          (this.useSecureConnection = !1),
          (this.playerServerPort = 8890),
          (this.playerServerIp = t),
          (this.playerServerPort = n),
          (this.playerIp = e),
          r && (this.useSecureConnection = r);
      }
      return (
        (e.prototype.GetLivePlayer = function (e, t, r, n, i, s) {
          return (
            (this.player = new I2vPlayer(
              e,
              t,
              "Live",
              r,
              0,
              this.useSecureConnection,
              n,
              s,
              "1",
              i,
              this.playerServerPort
            )),
            (this.player.playerIp = this.playerIp),
            (this.player.playerServerIp = this.playerServerIp),
            (this.player.PlayerServerPort = this.playerServerPort),
            this.player
          );
        }),
        (e.prototype.GetPlaybackPlayer = function (e, t, r, n) {
          return (
            (this.player = new I2vPlayer(
              e,
              t,
              "PlayBack",
              "0",
              r,
              this.useSecureConnection,
              "0",
              "tcp",
              n,
              "",
              this.playerServerPort
            )),
            (this.player.playerIp = this.playerIp),
            (this.player.playerServerIp = this.playerServerIp),
            (this.player.PlayerServerPort = this.playerServerPort),
            this.player
          );
        }),
        (e.prototype.SeekVideo = function (e) {
          this.player && "Live" != this.player.mode && this.player.SeekVideo(e);
        }),
        (e.prototype.Pause = function () {
          this.player && "Live" != this.player.mode && this.player.Pause();
        }),
        (e.prototype.Resume = function () {
          this.player && "Live" != this.player.mode && this.player.Resume();
        }),
        e
      );
    })(),
    I2vPlayer = (function () {
      function e(e, t, r, n, i, s, a, o, u, c, l) {
        var d = this;
        (this.useSecureConnection = !1),
          (this.doesStopRequested = !1),
          (this.isErrorMessageVisible = !1),
          (this.useJmuxer = !1),
          (this.connectionmode = "tcp"),
          (this.playbackviaapache = !0),
          (this.mjpeg_overhttpurl = ""),
          (this.IsEmptyUrl = !1),
          (this.IsPlayerServerConnected = !1),
          (this.URL_Server_Not_Connected = !1),
          (this.PlayerServerPort = 8890),
          (this.OnVideoVisiblityChange = function (e) {
            d.useJmuxer &&
              ("hidden" == document.visibilityState
                ? d.jmuxer && (d.jmuxer = null)
                : d.Createjmuxerobject());
          }),
          (this.elId = e),
          (this.cameraId = t),
          (this.mode = r),
          (this.streamtype = n),
          (this.urlCreator = window.URL || window.webkitURL),
          (this.startTime = i),
          (this.useSecureConnection = s),
          (this.connectionmode = o),
          (this.playbackviaapache = u),
          (this.analyticType = c),
          (this.PlayerServerPort = l),
          this.analyticType || (this.analyticType = ""),
          this.connectionmode
            ? (this.connectionmode = this.connectionmode.toLowerCase())
            : (this.connectionmode = ""),
          "tcp" != this.connectionmode &&
            "udp" != this.connectionmode &&
            (this.connectionmode = ""),
          (this.useJmuxer = "Live" != r || !a || "0" == a);
      }
      return (
        (e.prototype.setErrorCallback = function (e) {
          this.errorCallback = e;
        }),
        (e.prototype.setRetryingCallback = function (e) {
          this.retryingCallback = e;
        }),
        (e.prototype.stop = function () {
          try {
            this.removeErrorMessage(),
              (this.doesStopRequested = !0),
              this.playrecursivetimeout &&
                clearTimeout(this.playrecursivetimeout),
              this.mjpeg_over_httptimeout &&
                clearTimeout(this.mjpeg_over_httptimeout);
            try {
              this.w && this.w.close();
            } catch (e) {}
            var e;
            delete this.m,
              delete this.v,
              this.isJpeg
                ? (e = document.getElementById(this.elId + "_img")) &&
                  ((e.src = ""), e.parentNode.removeChild(e))
                : (e = document.getElementById(this.elId + "_video")) &&
                  ((e.src = ""), e.parentNode.removeChild(e));
          } catch (e) {}
        }),
        (e.prototype.initializeMediaSource = function () {
          var i = this;
          this.m = new MediaSource();
          var t = 'video/mp4; codecs="avc1.4D0020"';
          MediaSource.isTypeSupported(t) &&
            (this.m.addEventListener("error", function (e) {
              console.log("error: " + i.m.readyState);
            }),
            this.m.addEventListener(
              "sourceopen",
              function (e) {
                console.log("sourceopen: " + i.m.readyState);
                try {
                  i.v.play();
                } catch (e) {
                  0;
                }
                (i.b = i.m.addSourceBuffer(t)),
                  (i.b.mode = "sequence"),
                  i.b.addEventListener("updateend", function (e) {
                    var t, r, n;
                    i.b.updating ||
                      (i.lastSegment &&
                        (i.b.appendBuffer(i.lastSegment), (i.lastSegment = null)),
                      i.b.buffered.length &&
                        ((t = i.v.currentTime),
                        (r = i.b.buffered.start(0)),
                        (n = i.b.buffered.end(0)),
                        20 < t - r &&
                          t < n &&
                          !i.b.updating &&
                          i.b.remove(r, t - 4)));
                  }),
                  !i.b.updating &&
                    "open" === i.m.readyState &&
                    i.intS &&
                    i.b.appendBuffer(i.intS),
                  (i.isSourceReady = !0);
              },
              !1
            ));
        }),
        (e.prototype._arrayBufferToBase64 = function (e) {
          for (
            var t = "", r = new Uint8Array(e), n = r.byteLength, i = 0;
            i < n;
            i++
          )
            t += String.fromCharCode(r[i]);
          return window.btoa(t);
        }),
        (e.prototype.play = function () {
          var a = this,
            e = "ws",
            t = 8181;
          this.useSecureConnection && ((e = "wss"), (t = 8182)),
            this.useJmuxer || this.initializeMediaSource(),
            this.removeErrorMessage(),
            this.showErrorMessage("Trying to Connect..."),
            (this.IsEmptyUrl = !1),
            (this.IsPlayerServerConnected = !1),
            (this.URL_Server_Not_Connected = !1),
            (this.w = new WebSocket(
              e +
                "://" +
                this.playerIp +
                ":" +
                t +
                "?cameraId~~" +
                this.cameraId +
                "&&id~~" +
                this.elId +
                "&&startTime~~" +
                this.startTime +
                "&&mode~~" +
                this.mode +
                "&&streamtype~~" +
                this.streamtype +
                "&&useJmuxer~~" +
                this.useJmuxer +
                "&&connectionmode~~" +
                this.connectionmode +
                "&&playbackviaapache~~" +
                this.playbackviaapache +
                "&&serverIp~~" +
                this.playerServerIp +
                "&&analyticType~~" +
                this.analyticType +
                "&&PlayerServerPort~~" +
                this.PlayerServerPort
            )),
            (this.w.binaryType = "arraybuffer"),
            this.w.addEventListener("open", function (e) {
              (a.doesStopRequested = !1), a.w.send("Hello Server!");
            }),
            this.w.addEventListener("close", function (e) {
              var t, r;
              a.doesStopRequested
                ? (console.log("socket closed"), a.removeErrorMessage())
                : (console.log("socket closed and retrying..."),
                  a.IsPlayerServerConnected
                    ? ((t = "Player Server Not Connected "),
                      a.showErrorMessage(t))
                    : a.URL_Server_Not_Connected
                    ? ((t = "URL Server Not Connected"), a.showErrorMessage(t))
                    : a.IsEmptyUrl
                    ? ((t =
                        "Live" == a.mode
                          ? "Url not configured"
                          : "Recording not Found"),
                      a.showErrorMessage(t))
                    : a.showErrorMessage("Player Not Connected..."),
                  delete a.w,
                  a.b && a.b.abort(),
                  a.jmuxer && a.disposejmuxer(),
                  (a.b = null),
                  (a.m = null),
                  delete a.v,
                  (a.isPlayerSet = !1),
                  a.isJpeg
                    ? (r = document.getElementById(a.elId + "_img")) &&
                      ((r.src = ""), r.parentNode.removeChild(r))
                    : (r = document.getElementById(a.elId + "_video")) &&
                      ((r.src = ""), r.parentNode.removeChild(r)),
                  (a.playrecursivetimeout = setTimeout(function () {
                    a.doesStopRequested || a.play();
                  }, 3e3)));
            }),
            (this.mjpeg_over_httptimeout = setInterval(function () {
              try {
                "" != a.mjpeg_overhttpurl &&
                  a.i.setAttribute("src", a.mjpeg_overhttpurl);
              } catch (e) {}
            }, 3e3)),
            this.w.addEventListener(
              "message",
              function (e) {
                switch (
                  ((a.IsEmptyUrl = !1),
                  (a.IsPlayerServerConnected = !1),
                  (a.URL_Server_Not_Connected = !1),
                  e.data)
                ) {
                  case "Server_ip_not_provided":
                    var t = "Please Provide Valid Server Ip";
                    return (
                      a.errorCallback && a.errorCallback(t),
                      void a.showErrorMessage(t)
                    );
                  case "Playback_Finished":
                    t = "Playback_Finished";
                    return (
                      console.log(t),
                      a.errorCallback && a.errorCallback(t),
                      void a.stop()
                    );
                  case "Video_Started":
                    t = "Video_Started";
                    return (
                      console.log(t), void (a.errorCallback && a.errorCallback(t))
                    );
                  case "unable_to_play":
                    t = "unable_to_play";
                    return (
                      console.log(t),
                      a.errorCallback && a.errorCallback(t),
                      void a.stop()
                    );
                  case "EmptyUrl":
                    a.IsEmptyUrl = !0;
                    t =
                      "Live" == a.mode
                        ? "Url not configured"
                        : "Recording not Found";
                    return (
                      a.errorCallback && a.errorCallback(t),
                      void a.showErrorMessage(t)
                    );
                  case "Player_Server_Not_Connected":
                    a.IsPlayerServerConnected = !0;
                    t = "Player Server Not Connected ";
                    return (
                      a.errorCallback && a.errorCallback(t),
                      void a.showErrorMessage(t)
                    );
                  case "URL_Server_Not_Connected":
                    a.URL_Server_Not_Connected = !0;
                    t = "URL Server Not Connected";
                    return (
                      a.errorCallback && a.errorCallback(t),
                      void a.showErrorMessage(t)
                    );
                  case "retrying":
                    a.retryingCallback && a.retryingCallback(),
                      a.showErrorMessage("Trying to Connect...");
                    try {
                      var r, n;
                      a.jmuxer && a.disposejmuxer(),
                        a.b &&
                          a.b.buffered &&
                          0 < a.b.buffered.length &&
                          ((r = a.b.buffered.start(0)),
                          (n = a.b.buffered.end(0)),
                          a.b.remove(r, n));
                    } catch (e) {}
                    return;
                  case "License Expired":
                    t = "License Expired/Invalid";
                    return (
                      a.errorCallback && a.errorCallback(t),
                      void a.showErrorMessage(t)
                    );
                  case "Some problem occured":
                    t = "Some Problem Occured";
                    return (
                      a.errorCallback && a.errorCallback(t),
                      void a.showErrorMessage(t)
                    );
                  default:
                    a.removeErrorMessage();
                }
                if (a.isPlayerSet) {
                  if (!a.isJpeg) {
                    var i = new Uint8Array(e.data);
                    if (a.useJmuxer)
                      a.jmuxer || a.Createjmuxerobject(),
                        a.jmuxer &&
                          a.jmuxer.mseReady &&
                          a.jmuxer.feed({ video: i });
                    else if ((a.intS || (a.intS = i), a.isSourceReady))
                      if (
                        (a.b &&
                          a.b.buffered.length &&
                          0.5 < a.b.buffered.end(0) - a.v.currentTime &&
                          (a.v.currentTime = a.b.buffered.end(0) - 0.5),
                        (a.lastSegment = i),
                        a.b && !a.b.updating && "open" === a.m.readyState)
                      ) {
                        try {
                          a.b.appendBuffer(a.lastSegment);
                        } catch (e) {
                          (a.isSourceReady = !1),
                            a.initializeMediaSource(),
                            (a.v.src = null),
                            (a.v.src = window.URL.createObjectURL(a.m));
                        }
                        a.lastSegment = null;
                      }
                  }
                } else if (!(e.data instanceof ArrayBuffer)) {
                  var s;
                  if ("mp4" === e.data)
                    a.removeErrorMessage(),
                      (a.v = document.createElement("video")),
                      ((s = document.getElementById(a.elId)).style.background =
                        "red"),
                      s.appendChild(a.v),
                      (a.v.id = a.elId + "_video"),
                      (a.v.style.height = "90%"),
                      (a.v.style.width = "100%"),
                      (a.v.style.display = "inline"),
                      (a.isJpeg = !1),
                      (a.intS = null),
                      a.useJmuxer
                        ? ((a.v.autoplay = !0),
                          document.addEventListener &&
                            document.addEventListener(
                              "visibilitychange",
                              a.OnVideoVisiblityChange
                            ),
                          a.Createjmuxerobject())
                        : (a.v.src = window.URL.createObjectURL(a.m));
                  else if ("mjpeg" === e.data)
                    (a.useJmuxer = !1),
                      a.removeErrorMessage(),
                      (a.i = document.createElement("img")),
                      ((s = document.getElementById(a.elId)).style.background =
                        "black"),
                      s.appendChild(a.i),
                      (a.i.id = a.elId + "_img"),
                      (a.i.style.height = "100%"),
                      (a.i.style.width = "100%"),
                      (a.i.style.display = "inline"),
                      (a.isJpeg = !0),
                      a.i.setAttribute(
                        "src",
                        "http://" + a.playerIp + ":4554/" + a.elId
                      );
                  else if (-1 !== e.data.indexOf("mjpeg_overhttp")) {
                    (a.mjpeg_overhttpurl = e.data.substring(14)),
                      (a.useJmuxer = !1),
                      a.removeErrorMessage(),
                      (a.i = document.createElement("img")),
                      ((s = document.getElementById(a.elId)).style.background =
                        "black"),
                      s.appendChild(a.i),
                      (a.i.id = a.elId + "_img"),
                      (a.i.style.height = "100%"),
                      (a.i.style.width = "100%"),
                      (a.i.style.display = "inline"),
                      (a.isJpeg = !0),
                      a.i.setAttribute("src", a.mjpeg_overhttpurl),
                      (a.doesStopRequested = !0);
                    try {
                      a.w && a.w.close();
                    } catch (e) {}
                  }
                  a.isPlayerSet = !0;
                }
              },
              !1
            );
        }),
        (e.prototype.disposejmuxer = function () {
          this.jmuxer = null;
        }),
        (e.prototype.Createjmuxerobject = function () {
          (this.jmuxer = null),
            this.v &&
              (this.jmuxer = new JMuxer({
                node: this.v.id,
                debug: !1,
                mode: "video",
                flushingTime: 0,
                fps: 30,
              }));
        }),
        (e.prototype.showErrorMessage = function (e) {
          this.isErrorMessageVisible = !0;
          var t = document.getElementById("errorMessage" + this.elId);
          t
            ? (t.innerHTML = e + "...")
            : (((t = document.createElement("span")).innerHTML = e + "..."),
              (t.style.color = "red"),
              (t.style.position = "absolute"),
              (t.style.fontSize = "25px"),
              (t.style.top = "5px"),
              (t.style.left = "10px"),
              (t.style.fontWeight = "bold"),
              (t.id = "errorMessage" + this.elId),
              (e = document.getElementById(this.elId)) &&
                ((e.style.background = "black"),
                (e.style.position = "relative"),
                e.appendChild(t)));
        }),
        (e.prototype.removeErrorMessage = function () {
          try {
            this.isErrorMessageVisible = !1;
            var e = document.getElementById("errorMessage" + this.elId);
            e && document.getElementById(this.elId).removeChild(e);
          } catch (e) {}
        }),
        (e.prototype.SeekVideo = function (e) {
          this.w && this.w.send("seek_Time" + e);
        }),
        (e.prototype.Pause = function () {
          this.w && this.w.send("Pause");
        }),
        (e.prototype.Resume = function () {
          this.w && this.w.send("Resume");
        }),
        (e.prototype.getBase64SnapshotUrl = function () {
          var e = "";
          try {
            var t,
              r = document.createElement("canvas");
            this.isJpeg
              ? ((r.width = this.i.naturalWidth),
                (r.height = this.i.naturalHeight),
                (t = r.getContext("2d")),
                (this.i.crossOrigin = "anonymous"),
                t.drawImage(this.i, 0, 0, r.width, r.height))
              : ((r.width = this.v.videoWidth),
                (r.height = this.v.videoHeight),
                (t = r.getContext("2d")).drawImage(
                  this.v,
                  0,
                  0,
                  r.width,
                  r.height
                )),
              (e = r.toDataURL("image/png")),
              this.i && (this.i.crossOrigin = null);
          } catch (e) {
            console.log(e);
          }
          return e;
        }),
        e
      );
    })();
  